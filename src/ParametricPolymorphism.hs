module ParametricPolymorphism (parametricPolymorphismMain)
where

import Data.Function

--------------------------------------------------------------------------
parametricPolymorphismMain :: IO()
parametricPolymorphismMain = do
  print "Parametric Polymorphism"
  print $ "------------------------------"
  print $ multSecond (1, 2) (3, 4)
  print $ "------------------------------"
  print $ (((\x y z -> x + y + z)  `on3` (^2)) 1 2 3)
  print $ "------------------------------"
  print $ doItYourself 40
  print $ "------------------------------"
  print $ swap (1, 'W')
  print $ "------------------------------"
--------------------------------------------------------------------------
getSecondFrom a b c = b
--------------------------------------------------------------------------
apply2 f x = f (f x)
--------------------------------------------------------------------------
multSecond = g `on` h

g = (*)

h :: (t, t1) -> t1
h p = snd p
--------------------------------------------------------------------------
on3 :: (b -> b -> b -> c) -> (a -> b) -> a -> a -> a -> c
on3 op f x y z = (op) (f x) (f y) (f z)
--------------------------------------------------------------------------
compose f g = \x -> f (g x )
--------------------------------------------------------------------------
doItYourself = f' . g' . h'
--------------------------------------------------------------------------
f' = logBase 2
--------------------------------------------------------------------------
g' = (^3)
--------------------------------------------------------------------------
h' = max 42
--------------------------------------------------------------------------
swap = f'' (g'' h'')
--------------------------------------------------------------------------
h'' = curry
g'' = flip
f'' = uncurry
